{"version":3,"sources":["assets/Images/Me.jpg","Const.js","NavBar.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavButtons","Projects","Resume","LinkedIn","Email","NavBar","className","Object","keys","Constants","map","button","Button","target","href","Home","src","Me","alt","Typography","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,gC,yOCA9BC,EAAa,CACxBC,SAAU,sCACVC,OAAQ,yGACRC,SAAU,iDACVC,MAAO,2BCCM,SAASC,IACtB,OACE,yBAAKC,UAAU,UAEXC,OAAOC,KAAKC,GAAsBC,KAAI,SAACC,GAAM,OAC3C,kBAACC,EAAA,EAAM,CAACC,OAAO,IAAIC,KAAML,EAAqBE,IAC3CA,O,2BCLE,SAASI,IACtB,OACE,yBAAKT,UAAU,QAAM,yEAGnB,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,iBAAiBU,IAAKC,IAAIC,IAAI,2BAA2B,sBAG1E,yBAAKZ,UAAU,mBACb,kBAACa,EAAA,EAAU,CAACC,QAAQ,MAAI,aAGxB,kBAACD,EAAA,EAAU,CAACb,UAAU,iBAAe,sBAEnC,6BAAM,iBAEN,6BAAM,mBAIR,kBAACa,EAAA,EAAU,CAACC,QAAQ,MAAI,SAGxB,kBAACD,EAAA,EAAU,CAACb,UAAU,iBAAe,eAEnC,6BACA,uBAAGA,UAAU,aAAaO,OAAO,IAAIC,KF3Bd,sEE4BrB,qCAEF,6BAAM,mBAIR,kBAACK,EAAA,EAAU,CAACC,QAAQ,MAAI,QAGxB,kBAACD,EAAA,EAAU,CAACb,UAAU,iBAAe,SAEnC,6BAAM,eAEN,6BAAM,WC9BHe,MAZf,WACE,OACE,yBAAKf,UAAU,OACb,kBAACa,EAAA,EAAU,CAACC,QAAQ,KAAKd,UAAU,UAAQ,qBAG3C,kBAAC,EAAM,MACP,kBAAC,EAAI,QCDSgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAU,KACf,kBAAC,EAAG,OAENC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4e3ef2a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Me.bbf223e4.jpg\";","export const NavButtons = {\n  Projects: 'https://github.com/shashankmurching',\n  Resume: 'https://drive.google.com/file/d/0BykdE61ta3-BRDN3dE4ydmpSQm8/view?resourcekey=0-7--jCAewJfmz6oMNYx4Kmg',\n  LinkedIn: 'https://www.linkedin.com/in/shashank-murching/',\n  Email: 'mailto:smurch@umich.edu',\n};\n\nexport const SPOTIFY_ACCOUNT_URL = 'https://open.spotify.com/user/rabidcakes?si=6ZPMs9smRia1lzi2HinuHQ';\n","import React from 'react';\nimport './styles/NavBar.css';\nimport Button from '@material-ui/core/Button';\nimport * as Constants from './Const';\n\nexport default function NavBar() {\n  return (\n    <div className=\"NavBar\">\n      {\n        Object.keys(Constants.NavButtons).map((button) => (\n          <Button target=\"_\" href={Constants.NavButtons[button]}>\n            {button}\n          </Button>\n        ))\n      }\n    </div>\n  );\n}\n","import React from 'react';\nimport './styles/Home.css';\nimport Typography from '@material-ui/core/Typography';\nimport Me from './assets/Images/Me.jpg';\nimport * as Constants from './Const';\n\nexport default function Home() {\n  return (\n    <div className=\"Home\">\n      I&apos;m a software engineer at Microsoft and graduated from UofM. Go Blue!\n\n      <div className=\"ContentContainer\">\n        <div className=\"ImageContainer\">\n          <img className=\"ProfilePicture\" src={Me} alt=\"Me with a cheeky grin!\" />\n          pc: Gabi de Coster\n        </div>\n        <div className=\"InterestsHeader\">\n          <Typography variant=\"h5\">\n            Interests\n          </Typography>\n          <Typography className=\"ListInterests\">\n            Distributed Systems\n            <br />\n            Infrastructure\n            <br />\n            Web Development\n          </Typography>\n\n          <Typography variant=\"h5\">\n            Vibes\n          </Typography>\n          <Typography className=\"ListInterests\">\n            Coffee Shops\n            <br />\n            <a className=\"HiddenLink\" target=\"_\" href={Constants.SPOTIFY_ACCOUNT_URL}>\n              <b>Music</b>\n            </a>\n            <br />\n            People Watching\n          </Typography>\n\n          <Typography variant=\"h5\">\n            Misc\n          </Typography>\n          <Typography className=\"ListInterests\">\n            Movies\n            <br />\n            Music Theory\n            <br />\n            Food\n          </Typography>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './styles/App.css';\nimport Typography from '@material-ui/core/Typography';\nimport NavBar from './NavBar';\nimport Home from './Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Typography variant=\"h2\" className=\"Header\">\n        Shashank Murching\n      </Typography>\n      <NavBar />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}