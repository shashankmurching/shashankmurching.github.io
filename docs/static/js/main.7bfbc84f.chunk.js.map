{"version":3,"sources":["assets/Images/Me.jpg","Const.js","NavBar.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavButtons","Projects","Resume","LinkedIn","Email","NavBar","className","Object","keys","Constants","map","button","Button","target","href","Home","src","Me","alt","Typography","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,gC,yOCA9BC,EAAa,CACxBC,SAAU,sCACVC,OAAQ,gEACRC,SAAU,iDACVC,MAAO,2BCCM,SAASC,IACtB,OACE,yBAAKC,UAAU,UAEXC,OAAOC,KAAKC,GAAsBC,KAAI,SAACC,GAAD,OACpC,kBAACC,EAAA,EAAD,CAAQC,OAAO,IAAIC,KAAML,EAAqBE,IAC3CA,O,2BCLE,SAASI,IACtB,OACE,yBAAKT,UAAU,QAAf,kFAGE,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,iBAAiBU,IAAKC,IAAIC,IAAI,2BAD/C,sBAIA,yBAAKZ,UAAU,mBACb,kBAACa,EAAA,EAAD,CAAYC,QAAQ,MAApB,aAGA,kBAACD,EAAA,EAAD,CAAYb,UAAU,iBAAtB,sBAEE,6BAFF,iBAIE,6BAJF,mBAQA,kBAACa,EAAA,EAAD,CAAYC,QAAQ,MAApB,SAGA,kBAACD,EAAA,EAAD,CAAYb,UAAU,iBAAtB,eAEE,6BACA,uBAAGA,UAAU,aAAaO,OAAO,IAAIC,KF3Bd,sEE2BvB,SAGA,6BANF,oBAUA,kBAACK,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAGA,kBAACD,EAAA,EAAD,CAAYb,UAAU,iBAAtB,YAEE,6BAFF,WAIE,6BAJF,QAME,6BANF,UC1BKe,MAZf,WACE,OACE,yBAAKf,UAAU,OACb,kBAACa,EAAA,EAAD,CAAYC,QAAQ,KAAKd,UAAU,UAAnC,qBAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7bfbc84f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Me.bbf223e4.jpg\";","export const NavButtons = {\r\n  Projects: 'https://github.com/shashankmurching',\r\n  Resume: 'https://drive.google.com/open?id=0BykdE61ta3-BRDN3dE4ydmpSQm8',\r\n  LinkedIn: 'https://www.linkedin.com/in/shashank-murching/',\r\n  Email: 'mailto:smurch@umich.edu',\r\n};\r\n\r\nexport const SPOTIFY_ACCOUNT_URL = 'https://open.spotify.com/user/rabidcakes?si=6ZPMs9smRia1lzi2HinuHQ';\r\n","import React from 'react';\r\nimport './styles/NavBar.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport * as Constants from './Const';\r\n\r\nexport default function NavBar() {\r\n  return (\r\n    <div className=\"NavBar\">\r\n      {\r\n        Object.keys(Constants.NavButtons).map((button) => (\r\n          <Button target=\"_\" href={Constants.NavButtons[button]}>\r\n            {button}\r\n          </Button>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './styles/Home.css';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Me from './assets/Images/Me.jpg';\r\nimport * as Constants from './Const';\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div className=\"Home\">\r\n      I&apos;m a software engineer at Microsoft and recently graduated from UofM. Go Blue!\r\n\r\n      <div className=\"ContentContainer\">\r\n        <div className=\"ImageContainer\">\r\n          <img className=\"ProfilePicture\" src={Me} alt=\"Me with a cheeky grin!\" />\r\n          pc: Gabi de Coster\r\n        </div>\r\n        <div className=\"InterestsHeader\">\r\n          <Typography variant=\"h5\">\r\n            Interests\r\n          </Typography>\r\n          <Typography className=\"ListInterests\">\r\n            Distributed Systems\r\n            <br />\r\n            Infrastructure\r\n            <br />\r\n            Web Development\r\n          </Typography>\r\n\r\n          <Typography variant=\"h5\">\r\n            Vibes\r\n          </Typography>\r\n          <Typography className=\"ListInterests\">\r\n            Coffee Shops\r\n            <br />\r\n            <a className=\"HiddenLink\" target=\"_\" href={Constants.SPOTIFY_ACCOUNT_URL}>\r\n              Music\r\n            </a>\r\n            <br />\r\n            Animal Fun Facts\r\n          </Typography>\r\n\r\n          <Typography variant=\"h5\">\r\n            Burrito Bracket\r\n          </Typography>\r\n          <Typography className=\"ListInterests\">\r\n            Pancheros\r\n            <br />\r\n            Chipotle\r\n            <br />\r\n            Qdoba\r\n            <br />\r\n            Btb\r\n          </Typography>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './styles/App.css';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NavBar from './NavBar';\r\nimport Home from './Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Typography variant=\"h2\" className=\"Header\">\r\n        Shashank Murching\r\n      </Typography>\r\n      <NavBar />\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}